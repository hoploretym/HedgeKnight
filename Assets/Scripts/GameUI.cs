using System.Collections;
using System.Collections.Generic;
using System.Linq;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class GameUI : MonoBehaviour
{
    private GameManager gameManager; // –°—É—â–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ö–æ–¥–∞–º–∏ –∏ –±–æ–µ–º
    public Button startButton; // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –±–æ—è
    public Button endTurnButton; // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
    public Button restartButton; // –ö–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—è
    public TextMeshProUGUI logText; // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—è
    public ScrollRect logScroll; // –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω –∑–∞ —Å–∫—Ä–æ–ª–ª –ª–æ–≥–æ–≤ –±–æ—è

    // –°–ø—Ä–∞–π—Ç—ã –∏ –º–∞—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ Player
    public Image playerBaseSprite; // –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–∞–π—Ç —Ä—ã—Ü–∞—Ä—è Player
    public Image playerHeadMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ –≥–æ–ª–æ–≤–µ
    public Image playerTorsoMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ —Ç–æ—Ä—Å–∞
    public Image playerArmsMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ —Ä—É–∫–∞—Ö
    public Image playerLegsMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ –Ω–æ–≥–∞—Ö

    // –°–ø—Ä–∞–π—Ç—ã –∏ –º–∞—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ Enemy
    public Image enemyBaseSprite; // –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–∞–π—Ç —Ä—ã—Ü–∞—Ä—è Player
    public Image enemyHeadMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ –≥–æ–ª–æ–≤–µ
    public Image enemyTorsoMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ —Ç–æ—Ä—Å–∞
    public Image enemyArmsMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ —Ä—É–∫–∞—Ö
    public Image enemyLegsMask; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–∫—Ä–∞—à–∏–≤–∞–µ–º–∞—è –º–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –Ω–∞ –Ω–æ–≥–∞—Ö

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –•–ü —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞
    public TextMeshProUGUI playerHeadHPText;
    public TextMeshProUGUI playerTorsoHPText;
    public TextMeshProUGUI playerArmsHPText;
    public TextMeshProUGUI playerLegsHPText;

    public TextMeshProUGUI enemyHeadHPText;
    public TextMeshProUGUI enemyTorsoHPText;
    public TextMeshProUGUI enemyArmsHPText;
    public TextMeshProUGUI enemyLegsHPText;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–Ω–∞
    private readonly Color lightRed = new Color(240f / 255f, 128f / 255f, 128f / 255f, 1f); // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è 1–µ–¥. —É—Ä–æ–Ω–∞
    private readonly Color darkRed = new Color(139f / 255f, 0f, 0f, 1f); // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –ø–æ –•–ü

    // –¢—É–ª—Ç–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –•–ü –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –º–∞—Å–∫—É

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ Player –∏ Enemy
    public TextMeshProUGUI playerEnergyText;
    public TextMeshProUGUI enemyEnergyText;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –±–æ—è
    public CanvasGroup gameResultPanel;
    public TextMeshProUGUI gameResultText;

    public Slider playerEnergyBar;
    public Slider enemyEnergyBar;

    private List<string> logHistory = new List<string>();
    private const int maxLogs = 4;

    void Start()
    {
        gameManager = FindObjectOfType<GameManager>();
        startButton.onClick.AddListener(StartGame);
        endTurnButton.onClick.AddListener(EndTurn);
        restartButton.onClick.AddListener(RestartBattle);
        restartButton.gameObject.SetActive(false);
        DebugAllBodyParts();
        ResetDamageMasks();
    }

    void StartGame()
    {
        ClearLog();
        LogAction("–ë–æ–π –Ω–∞—á–∞–ª—Å—è!");
        gameManager.StartBattle();
        startButton.gameObject.SetActive(false);
        endTurnButton.gameObject.SetActive(true);
        restartButton.gameObject.SetActive(true);

        ResetDamageMasks();
    }

    void EndTurn()
    {
        gameManager.FinishTurn();
    }

    public void RestartBattle()
    {
        GameManager.Instance.battleEnded = false;
        SceneManager.LoadScene(SceneManager.GetActiveScene().name);
    }

    public void LogRoundResults(List<string> roundLog)
    {
        foreach (string logEntry in roundLog)
        {
            LogAction(logEntry);
        }
    }

    public void LogAction(string message)
    {
        Debug.Log($"[LogAction] {message}");

        logHistory.Add(message);

        // ‚ö†Ô∏è –ù–ï –æ–±—Ä–µ–∑–∞–µ–º –¥–æ maxLogs!
        // –ò–Ω–∞—á–µ ScrollView –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å, —á—Ç–æ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏

        logText.text = string.Join("\n", logHistory);

        // ‚¨áÔ∏è –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å)
        if (logScroll != null)
        {
            Canvas.ForceUpdateCanvases();
            logScroll.verticalNormalizedPosition = 0f;
        }
    }

    public void UpdateCharacterDamage(Character character, string bodyPart, int currentHP)
    {
        Image targetMask = null;
        int maxHP = character.GetMaxHP(bodyPart);

        if (character.IsPlayer)
        {
            switch (bodyPart)
            {
                case "Head":
                    targetMask = playerHeadMask;
                    break;
                case "Torso":
                    targetMask = playerTorsoMask;
                    break;
                case "Arms":
                    targetMask = playerArmsMask;
                    break;
                case "Legs":
                    targetMask = playerLegsMask;
                    break;
            }
        }
        else
        {
            switch (bodyPart)
            {
                case "Head":
                    targetMask = enemyHeadMask;
                    break;
                case "Torso":
                    targetMask = enemyTorsoMask;
                    break;
                case "Arms":
                    targetMask = enemyArmsMask;
                    break;
                case "Legs":
                    targetMask = enemyLegsMask;
                    break;
            }
        }

        UpdateDamageMask(targetMask, currentHP, maxHP);
    }

    private IEnumerator FlashHitMask(Image mask, Color targetColor)
    {
        if (mask == null)
            yield break;

        float duration = 0.7f;
        float elapsed = 0f;

        mask.color = Color.white;

        while (elapsed < duration)
        {
            float t = elapsed / duration;
            Color lerped = Color.Lerp(Color.white, targetColor, t);
            mask.color = lerped;
            elapsed += Time.deltaTime;
            yield return null;
        }

        mask.color = targetColor;
    }

    public void UpdateAllHPText()
    {
        if (GameManager.Instance == null)
            return;

        Character player = GameManager.Instance.playerController.GetCharacter();
        Character enemy = GameManager.Instance.enemyController.GetCharacter();

        UpdateSingleHPText(player, playerHeadHPText, "Head");
        UpdateSingleHPText(player, playerTorsoHPText, "Torso");
        UpdateSingleHPText(player, playerArmsHPText, "Arms");
        UpdateSingleHPText(player, playerLegsHPText, "Legs");

        UpdateSingleHPText(enemy, enemyHeadHPText, "Head");
        UpdateSingleHPText(enemy, enemyTorsoHPText, "Torso");
        UpdateSingleHPText(enemy, enemyArmsHPText, "Arms");
        UpdateSingleHPText(enemy, enemyLegsHPText, "Legs");
    }

    private void UpdateSingleHPText(Character c, TextMeshProUGUI text, string part)
    {
        if (text == null || c == null)
            return;

        int current = c.GetCurrentHP(part);
        int max = c.GetMaxHP(part);
        text.text = $"{current}/{max}";
    }

    private void UpdateDamageMask(Image mask, int currentHP, int maxHP)
    {
        if (mask == null)
            return;

        if (currentHP == maxHP)
        {
            mask.color = new Color(1, 1, 1, 0); // –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        }
        else
        {
            float damagePercent = 1f - ((float)currentHP / maxHP);
            Color newColor = Color.Lerp(lightRed, darkRed, damagePercent);
            Debug.Log(
                $"[UpdateDamageMask] {mask.name}: HP {currentHP}/{maxHP} ‚Üí {damagePercent * 100:F0}% —É—Ä–æ–Ω–∞ ‚Üí —Ü–≤–µ—Ç {newColor}"
            );
            StartCoroutine(FlashHitMask(mask, newColor));
        }
    }

    private void ResetDamageMasks()
    {
        playerHeadMask.color = new Color(1, 1, 1, 0);
        playerTorsoMask.color = new Color(1, 1, 1, 0);
        playerArmsMask.color = new Color(1, 1, 1, 0);
        playerLegsMask.color = new Color(1, 1, 1, 0);

        enemyHeadMask.color = new Color(1, 1, 1, 0);
        enemyTorsoMask.color = new Color(1, 1, 1, 0);
        enemyArmsMask.color = new Color(1, 1, 1, 0);
        enemyLegsMask.color = new Color(1, 1, 1, 0);
    }

    public void DebugAllBodyParts()
    {
        var handlers = FindObjectsOfType<BodyPartTooltipHandler>();
        Debug.Log($"üß† –ù–∞–π–¥–µ–Ω–æ {handlers.Length} BodyPartTooltipHandler'–æ–≤");

        foreach (var handler in handlers)
        {
            Debug.Log(
                $"‚û°Ô∏è –ù–∞ –æ–±—ä–µ–∫—Ç–µ [{handler.gameObject.name}] ‚Äî bodyPart = {handler.bodyPart}, isPlayer = {handler.isPlayer}"
            );
        }
    }

    public void UpdateCardSelection(List<Card> selectedCards)
    {
        foreach (Transform child in gameManager.playerHand.handPanel)
        {
            CardButton cardButton = child.GetComponent<CardButton>();
            if (cardButton != null && cardButton.Card != null)
            {
                bool isSelected = selectedCards.Contains(cardButton.Card);
                cardButton.SetOutline(isSelected);
            }
        }
    }

    public void RefreshHandUI()
    {
        Debug.Log("[GameUI] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ä—É–∫–∏!");
    }

    public void ShowPlayedCards(List<Card> playerCards, Card enemyCard)
    {
        if (playerCards == null || playerCards.Count == 0 || enemyCard == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç null!");
            return;
        }

        string logMessage =
            $"<b>–ò–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª:</b> {string.Join(", ", playerCards.Select(card => card.Name))}\n"
            + $"<b>–û–ø–ø–æ–Ω–µ–Ω—Ç —Å—ã–≥—Ä–∞–ª:</b> {enemyCard.Name}\n"
            + "<size=18>---------------------------</size>";

        LogAction(logMessage);
    }

    public void ClearLog()
    {
        logHistory.Clear();
        if (logText != null)
        {
            logText.text = "";
        }
    }

    public void UpdateEnergy(Character player, Character enemy)
    {
        if (playerEnergyText != null)
            playerEnergyText.text = $"Energy: {player.Energy}/30";
        if (enemyEnergyText != null)
            enemyEnergyText.text = $"Energy: {enemy.Energy}/30";

        if (playerEnergyBar != null)
            playerEnergyBar.value = player.Energy;
        if (enemyEnergyBar != null)
            enemyEnergyBar.value = enemy.Energy;
    }

    public void ShowGameResult(bool isPlayerWin)
    {
        StartCoroutine(FadeGameResult(isPlayerWin));
    }

    private IEnumerator FadeGameResult(bool isPlayerWin)
    {
        gameResultPanel.alpha = 0f;
        gameResultPanel.gameObject.SetActive(true);

        gameResultText.text = isPlayerWin ? "–ü–û–ë–ï–î–ê!" : "–ü–û–†–ê–ñ–ï–ù–ò–ï";
        gameResultText.color = isPlayerWin ? Color.green : Color.red;

        // ‚è± –ø–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏
        yield return new WaitForSeconds(1f);

        // ‚¨Ü –ø–ª–∞–≤–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è
        float t = 0f;
        while (t < 1f)
        {
            t += Time.deltaTime;
            gameResultPanel.alpha = t;
            yield return null;
        }

        // ‚è≥ –≤–∏—Å–∏—Ç —á—É—Ç—å-—á—É—Ç—å
        yield return new WaitForSeconds(2f);

        // ‚¨á –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        while (t > 0f)
        {
            t -= Time.deltaTime;
            gameResultPanel.alpha = t;
            yield return null;
        }

        gameResultPanel.gameObject.SetActive(false);
    }
}
