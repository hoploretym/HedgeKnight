using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.SceneManagement;

public class GameUI : MonoBehaviour
{
    private GameManager gameManager;
    public Button startButton;
    public Button endTurnButton;
    public Button restartButton;
    public TextMeshProUGUI logText;

    // üé≠ –ë–∞–∑–æ–≤—ã–µ —Å–ø—Ä–∞–π—Ç—ã –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
    public Image playerBaseSprite;
    public Image playerHeadMask;
    public Image playerTorsoMask;
    public Image enemyBaseSprite;
    public Image enemyHeadMask;
    public Image enemyTorsoMask;

    public Sprite headDamage1, headDamage2;
    public Sprite torsoDamage1, torsoDamage2, torsoDamage3;

    void Start()
    {
        gameManager = FindObjectOfType<GameManager>();
        startButton.onClick.AddListener(StartGame);
        endTurnButton.onClick.AddListener(EndTurn);
        endTurnButton.gameObject.SetActive(false);
        restartButton.onClick.AddListener(RestartBattle);
        restartButton.gameObject.SetActive(false); // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –±–æ—è


        // –°–∫—Ä—ã–≤–∞–µ–º —É—Ä–æ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        ResetDamageMasks();
    }

    void StartGame()
    {
        ClearLog();
        LogAction("–ë–æ–π –Ω–∞—á–∞–ª—Å—è!");
        gameManager.StartBattle();
        startButton.gameObject.SetActive(false);
        endTurnButton.gameObject.SetActive(true);
        restartButton.gameObject.SetActive(true);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        ResetDamageMasks();
    }

    void EndTurn()
    {
        gameManager.FinishTurn();
    }

    public void RestartBattle()
    {
    GameManager.Instance.battleEnded = false;
    SceneManager.LoadScene(SceneManager.GetActiveScene().name); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É
    }

    // ü©∏ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô
public void UpdateCharacterDamage(Character character, string bodyPart, int hits)
{
    Image targetMask = null;
    Color damageColor = new Color(1, 1, 1, 0); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π

    if (character.IsPlayer)
    {
        if (bodyPart == "Head")
        {
            targetMask = playerHeadMask;
            if (hits == 1) damageColor = new Color(240f / 255f, 128f / 255f, 128f / 255f, 1f); // #F08080
            else if (hits >= 2) damageColor = new Color(139f / 255f, 0f, 0f, 1f); // #8B0000
        }
        else if (bodyPart == "Torso")
        {
            targetMask = playerTorsoMask;
            if (hits == 1) damageColor = new Color(240f / 255f, 128f / 255f, 128f / 255f, 1f); // #F08080
            else if (hits == 2) damageColor = new Color(178f / 255f, 34f / 255f, 34f / 255f, 1f); // #B22222
            else if (hits >= 3) damageColor = new Color(139f / 255f, 0f, 0f, 1f); // #8B0000
        }
    }
    else
    {
        if (bodyPart == "Head")
        {
            targetMask = enemyHeadMask;
            if (hits == 1) damageColor = new Color(240f / 255f, 128f / 255f, 128f / 255f, 1f); // #F08080
            else if (hits >= 2) damageColor = new Color(139f / 255f, 0f, 0f, 1f); // #8B0000
        }
        else if (bodyPart == "Torso")
        {
            targetMask = enemyTorsoMask;
            if (hits == 1) damageColor = new Color(240f / 255f, 128f / 255f, 128f / 255f, 1f); // #F08080
            else if (hits == 2) damageColor = new Color(178f / 255f, 34f / 255f, 34f / 255f, 1f); // #B22222
            else if (hits >= 3) damageColor = new Color(139f / 255f, 0f, 0f, 1f); // #8B0000
        }
    }

    if (targetMask == null) return;

    targetMask.color = damageColor;
}

public void LogRoundResults(List<string> roundLog)
{
    foreach (string logEntry in roundLog)
    {
        LogAction(logEntry);
    }
}

    // üîÑ –°–ë–†–û–° –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô
private void ResetDamageMasks()
{
    playerHeadMask.color = new Color(1, 1, 1, 0); // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    playerTorsoMask.color = new Color(1, 1, 1, 0);
    enemyHeadMask.color = new Color(1, 1, 1, 0);
    enemyTorsoMask.color = new Color(1, 1, 1, 0);
}

    // üî∂ **–í–û–ó–í–†–ê–©–ê–ï–ú UpdateCardSelection()**
    public void UpdateCardSelection(List<Card> selectedCards)
    {
        foreach (Transform child in gameManager.playerHand.handPanel)
        {
            CardButton cardButton = child.GetComponent<CardButton>();
            if (cardButton != null && cardButton.Card != null)
            {
                child.GetComponent<Image>().color = selectedCards.Contains(cardButton.Card) ? Color.yellow : Color.white;
            }
        }
    }

    // üî∑ **–í–û–ó–í–†–ê–©–ê–ï–ú RefreshHandUI()**
    public void RefreshHandUI()
    {
        LogAction("<color=#00FF00>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É–∫–∏!</color>");
    }

    public void ShowPlayedCards(List<Card> playerCards, Card enemyCard)
    {
        if (playerCards == null || playerCards.Count == 0 || enemyCard == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç null!");
            return;
        }

        string logMessage = $"<b>–ò–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª:</b> {string.Join(", ", playerCards.Select(card => card.Name))}\n" +
                            $"<b>–û–ø–ø–æ–Ω–µ–Ω—Ç —Å—ã–≥—Ä–∞–ª:</b> {enemyCard.Name}\n" +
                            "<size=18>---------------------------</size>";

        ClearLog();
        LogAction(logMessage);
    }

    public void LogAction(string message)
    {
        if (logText != null)
        {
            logText.text += message + "\n";
        }
    }

    public void ClearLog()
    {
        if (logText != null)
        {
            logText.text = "";
        }
    }
}
