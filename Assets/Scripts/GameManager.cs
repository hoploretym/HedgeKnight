using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance { get; private set; }

    public CharacterManager playerController;
    public CharacterManager enemyController;
    public HandManager playerHand;
    public EnemyHandManager enemyHand;
    public GameUI gameUI;
    
    private Character player;
    private Character enemy;
    private List<Card> playerSelectedCards = new List<Card>();
    private Card enemyChosenCard;
    private bool waitingForChoices = true;

    void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }

    void Start()
    {
        player = playerController.GetCharacter();
        enemy = enemyController.GetCharacter();
        player.IsPlayer = true;
        enemy.IsPlayer = false;
    }

    public void StartBattle()
    {
        Debug.Log("–ë–æ–π –Ω–∞—á–∞–ª—Å—è!");
        gameUI.ClearLog(); // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±–æ—è
        Deck playerDeck = GameObject.Find("DeckManager")?.GetComponent<Deck>();
        Deck enemyDeck = GameObject.Find("DeckManagerEnemy")?.GetComponent<Deck>();

        if (playerDeck == null || enemyDeck == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã DeckManager –∏–ª–∏ DeckManagerEnemy!");
            return;
        }

        Debug.Log($"–ù–∞–∑–Ω–∞—á–∞–µ–º {playerHand?.gameObject.name ?? "NULL"} –∫–æ–ª–æ–¥—É: {playerDeck.gameObject.name}");
        Debug.Log($"–ù–∞–∑–Ω–∞—á–∞–µ–º {enemyHand?.gameObject.name ?? "NULL"} –∫–æ–ª–æ–¥—É: {enemyDeck.gameObject.name}");

        if (playerHand == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: playerHand == null! –ü—Ä–æ–≤–µ—Ä—å, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ PlayerHandManager –≤ —Å—Ü–µ–Ω—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –≤ GameManager.");
            return;
        }

        if (enemyHand == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: enemyHand == null! –ü—Ä–æ–≤–µ—Ä—å, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ EnemyHandManager –≤ —Å—Ü–µ–Ω—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –≤ GameManager.");
            return;
        }

        playerHand.Initialize(playerDeck);
        enemyHand.Initialize(enemyDeck);

        player.ResetEnergy();
        enemy.ResetEnergy();

        playerHand.DrawNewHand();
        enemyHand.DrawNewHand();
    }

    public void PlayerSelectCard(int index)
    {
        Debug.Log($"[DEBUG] –ù–∞—á–∞–ª–æ PlayerSelectCard(). –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ä—Ç: {playerSelectedCards.Count}");

        if (!waitingForChoices) return;

        if (index < 0 || index >= playerHand.cardsInHand.Count)
        {
            Debug.Log("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã!");
            return;
        }

        Card selectedCard = playerHand.cardsInHand[index];

        Debug.Log($"[DEBUG] –ö–∞—Ä—Ç–∞ {selectedCard.Name} —Å–µ–π—á–∞—Å {(playerSelectedCards.Contains(selectedCard) ? "—É–∂–µ –≤—ã–±—Ä–∞–Ω–∞" : "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}.");

        if (playerSelectedCards.Contains(selectedCard))
        {
            playerSelectedCards.Remove(selectedCard);
            Debug.Log($"–ö–∞—Ä—Ç–∞ {selectedCard.Name} —É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.");
        }
        else if (player.Energy >= selectedCard.EnergyCost)
        {
            playerSelectedCards.Add(selectedCard);
            Debug.Log($"–ö–∞—Ä—Ç–∞ {selectedCard.Name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.");
        }
        else
        {
            Debug.Log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!");
        }

        Debug.Log($"[DEBUG] –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞: –≤—ã–±—Ä–∞–Ω–æ –∫–∞—Ä—Ç {playerSelectedCards.Count}");

        gameUI.UpdateCardSelection(playerSelectedCards);
    }

    public void FinishTurn()
{
    Debug.Log($"–ö–∞—Ä—Ç –≤ —Ä—É–∫–µ: {playerHand.cardsInHand.Count}, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç: {playerSelectedCards.Count}");

    if (playerSelectedCards.Count == 0)
    {
        gameUI.LogAction("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ö–æ–¥–∞!");
        return;
    }

    waitingForChoices = false;

    // üèπ –í—Ä–∞–≥ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É
    enemyChosenCard = enemyHand.GetRandomCard();
    gameUI.ClearLog();
    // üî• –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –±–æ—è —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    gameUI.LogAction($"–ò–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª: <b>{playerSelectedCards[0].Name}</b>");
    gameUI.LogAction($"–û–ø–ø–æ–Ω–µ–Ω—Ç —Å—ã–≥—Ä–∞–ª: <b>{enemyChosenCard.Name}</b>");
    gameUI.LogAction("---------------------------");

    // ‚öîÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
    foreach (var card in playerSelectedCards)
    {
        Debug.Log($"–ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã {card.Name}.");
        ApplyCardEffects(card, player, enemy, enemyChosenCard);
        playerHand.RemoveCard(card);
    }

    // ‚öîÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤—Ä–∞–≥–∞
    if (enemyChosenCard != null)
    {
        ApplyCardEffects(enemyChosenCard, enemy, player, playerSelectedCards.Count > 0 ? playerSelectedCards[0] : null);
        enemyHand.RemoveCard(enemyChosenCard);
    }

    // ‚ùå –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
    playerSelectedCards.Clear();

    // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    if (CheckBattleEnd()) return;

    // üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    player.ResetEnergy();
    enemy.ResetEnergy();

    playerHand.DrawNewHand();
    enemyHand.DrawNewHand();
    gameUI.RefreshHandUI();

    waitingForChoices = true;
}



    void ApplyCardEffects(Card card, Character attacker, Character target, Card opponentCard)
    {
        if (card == null) return;
        Debug.Log($"{attacker.name} –∏–≥—Ä–∞–µ—Ç {card.Name} –ø—Ä–æ—Ç–∏–≤ {target.name}");
        card.PlayCard(attacker, target, opponentCard);
    }

    public bool CheckBattleEnd()
    {
        if (player.HeadHits >= 2 || player.TorsoHits >= 3)
        {
            gameUI.LogAction("–ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª!");
            return true;
        }
        if (enemy.HeadHits >= 2 || enemy.TorsoHits >= 3)
        {
            gameUI.LogAction("–ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!");
            return true;
        }
        return false;
    }

    public void EndBattle(Character loser)
{
    string result = loser.IsPlayer ? "–ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª!" : "–ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!";
    gameUI.LogAction(result);
    Debug.Log(result);

    // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ü–µ–Ω—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
}
}
