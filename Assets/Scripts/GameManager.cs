using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance { get; private set; }

    public CharacterManager playerController;
    public CharacterManager enemyController;
    public HandManager playerHand;
    public EnemyHandManager enemyHand;
    public GameUI gameUI;
    
    private Character player;
    private Character enemy;
    private List<Card> playerSelectedCards = new List<Card>();
    private Card enemyChosenCard;
    private bool waitingForChoices = true;
    public bool battleEnded = false;
    private int turnNumber = 1;

    void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }

    void Start()
    {
        player = playerController.GetCharacter();
        enemy = enemyController.GetCharacter();
        player.IsPlayer = true;
        enemy.IsPlayer = false;
    }

    public void StartBattle()
    {
        Debug.Log("–ë–æ–π –Ω–∞—á–∞–ª—Å—è!");
        gameUI.ClearLog(); // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±–æ—è
        Deck playerDeck = GameObject.Find("DeckManager")?.GetComponent<Deck>();
        Deck enemyDeck = GameObject.Find("DeckManagerEnemy")?.GetComponent<Deck>();

        if (playerDeck == null || enemyDeck == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã DeckManager –∏–ª–∏ DeckManagerEnemy!");
            return;
        }

        Debug.Log($"–ù–∞–∑–Ω–∞—á–∞–µ–º {playerHand?.gameObject.name ?? "NULL"} –∫–æ–ª–æ–¥—É: {playerDeck.gameObject.name}");
        Debug.Log($"–ù–∞–∑–Ω–∞—á–∞–µ–º {enemyHand?.gameObject.name ?? "NULL"} –∫–æ–ª–æ–¥—É: {enemyDeck.gameObject.name}");

        if (playerHand == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: playerHand == null! –ü—Ä–æ–≤–µ—Ä—å, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ PlayerHandManager –≤ —Å—Ü–µ–Ω—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –≤ GameManager.");
            return;
        }

        if (enemyHand == null)
        {
            Debug.LogError("–û—à–∏–±–∫–∞: enemyHand == null! –ü—Ä–æ–≤–µ—Ä—å, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ EnemyHandManager –≤ —Å—Ü–µ–Ω—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –≤ GameManager.");
            return;
        }

        playerHand.Initialize(playerDeck);
        enemyHand.Initialize(enemyDeck);

        player.ResetEnergy();
        enemy.ResetEnergy();

        playerHand.DrawNewHand();
        enemyHand.DrawNewHand();
    }

    public void PlayerSelectCard(int index)
    {
        if (!waitingForChoices) return;

        if (index < 0 || index >= playerHand.cardsInHand.Count)
        {
            Debug.Log("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã!");
            return;
        }

        Card selectedCard = playerHand.cardsInHand[index];

        if (playerSelectedCards.Contains(selectedCard))
        {
            playerSelectedCards.Remove(selectedCard);
            Debug.Log($"–ö–∞—Ä—Ç–∞ {selectedCard.Name} —É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.");
        }
        else if (player.Energy >= selectedCard.EnergyCost)
        {
            playerSelectedCards.Add(selectedCard);
            Debug.Log($"–ö–∞—Ä—Ç–∞ {selectedCard.Name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.");
        }
        else
        {
            Debug.Log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!");
        }

        gameUI.UpdateCardSelection(playerSelectedCards);
    }

    public void FinishTurn()
{
    if (playerSelectedCards.Count == 0)
    {
        gameUI.LogAction("<color=red>–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ö–æ–¥–∞!</color>");
        return;
    }

    waitingForChoices = false;
    enemyChosenCard = enemyHand.GetRandomCard();
    gameUI.ClearLog();

    List<string> roundLog = new List<string>();
    roundLog.Add($"<b>–•–æ–¥ {turnNumber}.</b>");

    // üî• –ò–≥—Ä–æ–∫ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã
    foreach (var card in playerSelectedCards)
    {
        string result = ApplyCardEffects(card, player, enemy, enemyChosenCard);
        roundLog.Add($"<b>–°—ã–≥—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:</b> {card.Name}");
        roundLog.Add($"–≠—Ñ—Ñ–µ–∫—Ç: {result}");
        playerHand.RemoveCard(card);
    }

    // üî• –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É
    if (enemyChosenCard != null)
    {
        string enemyResult = ApplyCardEffects(enemyChosenCard, enemy, player, playerSelectedCards.Count > 0 ? playerSelectedCards[0] : null);
        roundLog.Add($"<b>–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É:</b> {enemyChosenCard.Name}");
        roundLog.Add($"–≠—Ñ—Ñ–µ–∫—Ç: {enemyResult}");
        enemyHand.RemoveCard(enemyChosenCard);
    }

    playerSelectedCards.Clear();

    if (CheckBattleEnd()) return;

    // üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
    player.ResetEnergy();
    enemy.ResetEnergy();
    playerHand.DrawNewHand();
    enemyHand.DrawNewHand();
    gameUI.RefreshHandUI();

    gameUI.LogRoundResults(roundLog);
    turnNumber++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–∞
    waitingForChoices = true;
}

    private string ApplyCardEffects(Card card, Character attacker, Character target, Card opponentCard)
    {
        if (card == null) return "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!";

        if (card.Type == CardType.Defense)
        {
            target.SetDefense(card.TargetBodyPart);
            return $"<color=blue>{target.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∑–∞—â–∏—Ç—É –Ω–∞ {card.TargetBodyPart}.</color>";
        }
        else
        {
            if (opponentCard != null && opponentCard.Type == CardType.Defense &&
                System.Array.Exists(opponentCard.Counters, c => c == card.Name))
            {
                return $"<color=blue>{target.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É {card.Name} —Å –ø–æ–º–æ—â—å—é {opponentCard.Name}!</color>";
            }

            target.TakeDamage(card.Damage, card.TargetBodyPart);
            return $"<color=red>{target.name} –ø–æ–ª—É—á–∏–ª {card.Damage} —É—Ä–æ–Ω–∞ –≤ {card.TargetBodyPart}!</color>";
        }
    }

 public bool CheckBattleEnd()
{
    if (battleEnded) return true; // –ï—Å–ª–∏ –±–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    if (player.HeadHits >= 2 || player.TorsoHits >= 3)
    {
        EndBattle(player);
        return true;
    }
    if (enemy.HeadHits >= 2 || enemy.TorsoHits >= 3)
    {
        EndBattle(enemy);
        return true;
    }

    return false;
}

public void EndBattle(Character loser)
{
    if (battleEnded) return; // –ï—Å–ª–∏ –±–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    battleEnded = true; // –§–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –±–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω
    string result = loser.IsPlayer ? "<b><color=red>–ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª!</color></b>" : "<b><color=green>–ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!</color></b>";

    gameUI.ClearLog(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    gameUI.LogAction(result);
    Debug.Log(result);
}
}
